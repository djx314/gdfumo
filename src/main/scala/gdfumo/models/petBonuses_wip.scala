package gdfumo

import io.circe.Codec
import io.circe.generic.JsonCodec
import io.circe.generic.semiauto.deriveCodec
import datatype.{GDArray, StringOrElse}

case class petBonuses(
  o: String,
  templateName: String,
  offensiveSlowPoisonChance: Option[BigDecimal],
  offensiveStunMin: Option[BigDecimal],
  offensiveElementalMin: Option[BigDecimal],
  offensiveSlowTotalSpeedMin: Option[BigDecimal],
  offensiveSlowLightningMin: Option[BigDecimal],
  offensiveSlowFireDurationMin: Option[BigDecimal],
  offensivePetrifyMin: Option[BigDecimal],
  defensivePercentCurrentLife: Option[BigDecimal],
  offensiveStunChance: Option[BigDecimal],
  conversionOutType2: Option[String],
  offensiveTotalResistanceReductionAbsoluteMin: Option[List[Int]],
  offensiveLightningModifierChance: Option[BigDecimal],
  offensiveSlowFireMin: Option[BigDecimal],
  offensiveColdMax: Option[List[Int]],
  offensiveGlobalChance: Option[BigDecimal],
  defensiveProtectionModifier: Option[BigDecimal],
  defensiveAetherMaxResist: Option[BigDecimal],
  defensivePoison: Option[BigDecimal],
  offensiveSlowAttackSpeedDurationMin: Option[BigDecimal],
  offensivePhysicalModifier: Option[BigDecimal],
  defensivePierce: Option[BigDecimal],
  offensiveSlowBleedingDurationMin: Option[BigDecimal],
  retaliationFireMin: Option[List[Int]],
  offensivePoisonModifier: Option[BigDecimal],
  offensiveSlowPoisonModifier: Option[BigDecimal],
  retaliationPoisonMin: Option[BigDecimal],
  defensiveChaosMaxResist: Option[BigDecimal],
  offensiveSlowColdMin: Option[BigDecimal],
  offensiveAetherMin: Option[BigDecimal],
  characterDefensiveAbilityModifier: Option[BigDecimal],
  offensivePoisonMin: Option[BigDecimal],
  retaliationTotalDamageModifier: Option[BigDecimal],
  offensiveSlowLightningDurationMin: Option[BigDecimal],
  offensiveSlowFireModifier: Option[BigDecimal],
  conversionInType: Option[String],
  offensiveSlowBleedingDurationModifier: Option[BigDecimal],
  offensiveLifeMin: Option[BigDecimal],
  offensiveSlowPhysicalModifier: Option[BigDecimal],
  offensivePetrifyGlobal: Option[BigDecimal],
  offensiveSlowBleedingModifierChance: Option[BigDecimal],
  retaliationSlowPoisonMin: Option[BigDecimal],
  conversionOutType: Option[String],
  offensiveSlowColdDurationMin: Option[BigDecimal],
  offensiveSlowPoisonDurationMin: Option[BigDecimal],
  retaliationSlowPoisonDurationMin: Option[BigDecimal],
  offensiveSlowBleedingMin: Option[BigDecimal],
  retaliationPoisonChance: Option[BigDecimal],
  offensiveSlowFireChance: Option[BigDecimal],
  offensiveElementalModifier: Option[BigDecimal],
  defensiveLightning: Option[BigDecimal],
  retaliationPhysicalMin: Option[BigDecimal],
  offensiveSlowPoisonGlobal: Option[BigDecimal],
  offensiveSlowAttackSpeedMin: Option[BigDecimal],
  offensiveSlowPoisonDurationModifier: Option[BigDecimal],
  offensiveSlowTotalSpeedDurationMin: Option[BigDecimal],
  defensiveProtection: Option[BigDecimal],
  conversionPercentage2: Option[BigDecimal],
  offensivePetrifyChance: Option[BigDecimal],
  offensiveSlowColdModifier: Option[BigDecimal],
  offensiveTauntMin: Option[BigDecimal],
  offensiveAetherModifier: Option[BigDecimal],
  characterOffensiveAbility: Option[List[Int]],
  retaliationAetherMin: Option[BigDecimal],
  conversionInType2: Option[String],
  offensiveSlowLightningModifier: Option[BigDecimal],
  characterOffensiveAbilityModifier: Option[BigDecimal],
  defensiveBleeding: Option[BigDecimal],
  offensiveAetherMax: Option[BigDecimal],
  defensiveAllMaxResist: Option[BigDecimal],
  offensiveTotalResistanceReductionAbsoluteDurationMin: Option[BigDecimal],
  offensiveSlowBleedingModifier: Option[BigDecimal],
  offensivePoisonModifierChance: Option[BigDecimal],
  defensiveElementalResistance: Option[BigDecimal],
  offensiveLifeModifier: GDArray[BigDecimal],
  offensiveFireMin: GDArray[BigDecimal],
  offensiveColdModifier: GDArray[BigDecimal],
  offensiveChaosModifier: GDArray[BigDecimal],
  defensivePhysical: GDArray[BigDecimal],
  offensiveChaosMin: GDArray[BigDecimal],
  defensiveLife: GDArray[BigDecimal],
  offensiveChaosMax: GDArray[BigDecimal],
  defensivePetrify: GDArray[BigDecimal],
  characterLifeModifier: GDArray[BigDecimal],
  defensiveTrap: GDArray[BigDecimal],
  offensiveFireModifier: GDArray[BigDecimal],
  offensiveSlowLifeModifier: GDArray[BigDecimal],
  offensiveLightningModifier: GDArray[BigDecimal],
  defensiveChaos: GDArray[BigDecimal],
  offensiveTotalDamageModifier: GDArray[BigDecimal],
  defensiveAether: GDArray[BigDecimal],
  offensiveSlowPoisonMin: GDArray[BigDecimal],
  defensiveTotalSpeedResistance: GDArray[BigDecimal],
  defensiveFreeze: GDArray[BigDecimal],
  offensiveColdMin: GDArray[BigDecimal],
  conversionPercentage: GDArray[BigDecimal],
  characterTotalSpeedModifier: GDArray[BigDecimal],
  offensivePhysicalMin: GDArray[BigDecimal],
  characterAttackSpeedModifier: GDArray[BigDecimal],
  offensiveLightningMin: GDArray[BigDecimal],
  defensiveStun: GDArray[BigDecimal],
  offensiveCritDamageModifier: GDArray[BigDecimal],
  defensiveConvert: GDArray[BigDecimal],
  offensiveLightningMax: GDArray[BigDecimal]
)
object petBonuses {
  implicit val codecJson: Codec[petBonuses] = {
    val impl = deriveCodec[petBonuses]
    Codec.from(impl, impl.mapJson(_.dropNullValues))
  }
}
