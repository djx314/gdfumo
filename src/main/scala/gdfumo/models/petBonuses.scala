package gdfumo

import io.circe._
import io.circe.generic.semiauto._

case class petBonuses(
  o: String,
  templateName: String,
  defensivePhysical: Option[Json],
  offensiveTotalDamageModifier: Option[Json],
  defensivePoison: Option[Json],
  characterOffensiveAbilityModifier: Option[Json],
  defensiveStun: Option[Json],
  characterLifeModifier: Option[Json],
  characterAttackSpeedModifier: Option[Json],
  defensiveElementalResistance: Option[Json],
  offensiveLightningModifier: Option[Json],
  defensiveLife: Option[Json],
  offensiveCritDamageModifier: Option[Json],
  offensiveSlowBleedingDurationMin: Option[Json],
  offensiveSlowBleedingMin: Option[Json],
  offensiveSlowBleedingModifier: Option[Json],
  offensiveSlowFireDurationMin: Option[Json],
  offensiveFireMin: Option[Json],
  offensiveSlowFireMin: Option[Json],
  offensiveFireModifier: Option[Json],
  offensiveSlowFireModifier: Option[Json],
  offensiveSlowFireChance: Option[Json],
  characterTotalSpeedModifier: Option[Json],
  characterDefensiveAbilityModifier: Option[Json],
  offensivePoisonModifier: Option[Json],
  conversionInType: Option[Json],
  conversionOutType: Option[Json],
  conversionPercentage: Option[Json],
  offensivePoisonModifierChance: Option[Json],
  retaliationPoisonMin: Option[Json],
  retaliationSlowPoisonMin: Option[Json],
  defensiveFreeze: Option[Json],
  retaliationSlowPoisonDurationMin: Option[Json],
  retaliationPoisonChance: Option[Json],
  retaliationTotalDamageModifier: Option[Json],
  offensiveElementalMin: Option[Json],
  defensiveBleeding: Option[Json],
  defensiveChaos: Option[Json],
  defensiveAether: Option[Json],
  offensiveChaosMin: Option[Json],
  offensivePhysicalModifier: Option[Json],
  offensiveSlowPhysicalModifier: Option[Json],
  offensivePhysicalMin: Option[Json],
  offensiveLightningMin: Option[Json],
  offensiveElementalModifier: Option[Json],
  offensiveChaosModifier: Option[Json],
  defensiveProtectionModifier: Option[Json],
  offensiveAetherModifier: Option[Json],
  conversionOutType2: Option[Json],
  conversionPercentage2: Option[Json],
  conversionInType2: Option[Json],
  offensiveSlowPoisonModifier: Option[Json],
  defensiveConvert: Option[Json],
  defensiveTrap: Option[Json],
  defensivePierce: Option[Json],
  offensiveLifeModifier: Option[Json],
  offensiveSlowLifeModifier: Option[Json],
  offensiveSlowLightningModifier: Option[Json],
  offensiveSlowPoisonChance: Option[Json],
  offensivePetrifyMin: Option[Json],
  offensiveGlobalChance: Option[Json],
  offensiveSlowPoisonMin: Option[Json],
  offensivePetrifyGlobal: Option[Json],
  offensiveSlowPoisonDurationMin: Option[Json],
  offensiveSlowPoisonGlobal: Option[Json],
  offensivePetrifyChance: Option[Json],
  offensiveSlowBleedingModifierChance: Option[Json],
  defensiveTotalSpeedResistance: Option[Json],
  defensivePetrify: Option[Json],
  defensiveAllMaxResist: Option[Json],
  offensiveStunChance: Option[Json],
  offensiveStunMin: Option[Json],
  offensiveLightningMax: Option[Json],
  retaliationPhysicalMin: Option[Json],
  offensiveLifeMin: Option[Json],
  defensiveAetherMaxResist: Option[Json],
  offensivePoisonMin: Option[Json],
  offensiveChaosMax: Option[Json],
  offensiveSlowAttackSpeedDurationMin: Option[Json],
  offensiveSlowAttackSpeedMin: Option[Json],
  offensiveColdModifier: Option[Json],
  offensiveSlowColdModifier: Option[Json],
  offensiveSlowTotalSpeedMin: Option[Json],
  offensiveColdMin: Option[Json],
  offensiveSlowTotalSpeedDurationMin: Option[Json],
  offensiveSlowPoisonDurationModifier: Option[Json],
  offensiveSlowBleedingDurationModifier: Option[Json],
  defensiveProtection: Option[Json],
  defensiveChaosMaxResist: Option[Json],
  offensiveLightningModifierChance: Option[Json],
  defensiveLightning: Option[Json],
  characterOffensiveAbility: Option[Json],
  defensivePercentCurrentLife: Option[Json],
  offensiveTauntMin: Option[Json],
  offensiveTotalResistanceReductionAbsoluteMin: Option[Json],
  offensiveTotalResistanceReductionAbsoluteDurationMin: Option[Json],
  offensiveColdMax: Option[Json],
  offensiveAetherMin: Option[Json],
  retaliationAetherMin: Option[Json],
  offensiveAetherMax: Option[Json],
  retaliationFireMin: Option[Json],
  offensiveSlowColdMin: Option[Json],
  offensiveSlowLightningDurationMin: Option[Json],
  offensiveSlowColdDurationMin: Option[Json],
  offensiveSlowLightningMin: Option[Json]
)
object petBonuses {
  implicit val codecJson: Codec[petBonuses] = {
    val impl = deriveCodec[petBonuses]
    Codec.from(impl, impl.mapJson(_.dropNullValues))
  }
}
